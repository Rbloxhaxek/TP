-- This is introvert1337's teleport script but using lerp. Have fun!
-- also if you came from my auto-rob using some loadstring logger you're a loser.
local replicated_storage = game:GetService("ReplicatedStorage");
local run_service = game:GetService("RunService");
local pathfinding_service = game:GetService("PathfindingService");
local players = game:GetService("Players");
local tween_service = game:GetService("TweenService");

local player = players.LocalPlayer;
local dependencies = {
    variables = {
        up_vector = Vector3.new(0, 800, 0),
        raycast_params = RaycastParams.new(),
        path = pathfinding_service:CreatePath({WaypointSpacing = 3}),
        player_speed = 150, 
        vehicle_speed = 450,
        teleporting = false,
        stopVelocity = false
    },
    modules = {
        ui = require(replicated_storage.Module.UI),
        store = require(replicated_storage.App.store),
        player_utils = require(replicated_storage.Game.PlayerUtils),
        vehicle_data = require(replicated_storage.Game.Garage.VehicleData),
        character_util = require(replicated_storage.Game.CharacterUtil),
        paraglide = require(replicated_storage.Game.Paraglide)
    },
    helicopters = { Heli = true }, -- heli is included in free vehicles
    motorcycles = { Volt = true }, -- volt type is "custom" but works the same as a motorcycle
    free_vehicles = { Camaro = true },
    unsupported_vehicles = { SWATVan = true, Wraith = true },
    door_positions = { }    
};
--// raycast filter
local workspacePartIgnore = {
    [1] = "Rain",
    [2] = "RainFall",
    [3] = "RainSnow",
    [4] = "Plane",
    [5] = "Items",
    [6] = "DirtRoad",
    [7] = "Vehicles",
    [8] = "VehicleSpawns",
    [9] = "Trains"
}

local RCPAR = dependencies.variables.raycast_params
RCPAR.FilterType = Enum.RaycastFilterType.Blacklist
local function Ignore(obj)
    local ignoreList = RCPAR.FilterDescendantsInstances
    table.insert(ignoreList, obj)
    RCPAR.FilterDescendantsInstances = ignoreList
end

local function WorkspaceOnChildAdded(child)
    if table.find(workspacePartIgnore, child.Name) then
        Ignore(child)
    end
end

for _, child in pairs(game:GetService("Workspace"):GetChildren()) do
    WorkspaceOnChildAdded(child)
end
for _, tree in pairs(game:GetService("CollectionService"):GetTagged("Tree")) do
    Ignore(tree)
end
for _, part in pairs(game:GetService("CollectionService"):GetTagged("NoClipAllowed")) do
    Ignore(part)
end

game:GetService("Workspace").ChildAdded:Connect(WorkspaceOnChildAdded)
game:GetService("CollectionService"):GetInstanceAddedSignal("Tree"):Connect(Ignore)
game:GetService("CollectionService"):GetInstanceAddedSignal("NoClipAllowed"):Connect(Ignore)
local function Raycast(origin, direction)
    return workspace:Raycast(origin, direction, dependencies.variables.raycast_params)
end
local movement = { };
local utilities = { };

--// function to toggle if a door can be collided with

function utilities:toggle_door_collision(door, toggle)
    for index, child in next, door.Model:GetChildren() do 
        if child:IsA("BasePart") then 
            child.CanCollide = toggle;
        end; 
    end;
end;

--// function to get the nearest vehicle that can be entered

function utilities:get_nearest_vehicle(tried) -- unoptimized
    local nearest;
    local distance = math.huge;

    for index, action in next, dependencies.modules.ui.CircleAction.Specs do -- all of the interations
        if action.IsVehicle and action.ShouldAllowEntry == true and action.Enabled == true and action.Name == "Enter Driver" then -- if the interaction is to enter the driver seat of a vehicle
            local vehicle = action.ValidRoot;

            if not table.find(tried, vehicle) and workspace.VehicleSpawns:FindFirstChild(vehicle.Name) then
                if not dependencies.unsupported_vehicles[vehicle.Name] and (dependencies.modules.store._state.garageOwned.Vehicles[vehicle.Name] or dependencies.free_vehicles[vehicle.Name]) and not vehicle.Seat.Player.Value then -- check if the vehicle is supported, owned and not already occupied
                    if not Raycast(vehicle.Seat.Position, Vector3.new(0, 1000, 0)) then
                        local magnitude = (vehicle.Seat.Position - player.Character.HumanoidRootPart.Position).Magnitude; 

                        if magnitude < distance then 
                            distance = magnitude;
                            nearest = action;
                        end;
                    end;
                end;
            end;
        end;
    end;

    return nearest;
end;

--// function to pathfind to a position with no collision above

function movement:pathfind(tried)
    local distance = math.huge;
    local nearest;

    local tried = tried or { };
    
    for index, value in next, dependencies.door_positions do -- find the nearest position in our list of positions without collision above
        if not table.find(tried, value) then
            local magnitude = (value.position - player.Character.HumanoidRootPart.Position).Magnitude;
            
            if magnitude < distance then 
                distance = magnitude;
                nearest = value;
            end;
        end;
    end;

    table.insert(tried, nearest);

    utilities:toggle_door_collision(nearest.instance, false);

    local path = dependencies.variables.path;
    path:ComputeAsync(player.Character.HumanoidRootPart.Position, nearest.position);

    if path.Status == Enum.PathStatus.Success then -- if path making is successful
        local waypoints = path:GetWaypoints();

        for index = 1, #waypoints do 
            local waypoint = waypoints[index];
            
            player.Character.HumanoidRootPart.CFrame = CFrame.new(waypoint.Position + Vector3.new(0, 2.5, 0)); -- walking movement is less optimal

            if not Raycast(player.Character.HumanoidRootPart.Position, Vector3.new(0, 1000, 0)) then -- if there is nothing above the player
                utilities:toggle_door_collision(nearest.instance, true);

                return;
            end;

            task.wait(0.05);
        end;
    end;

    utilities:toggle_door_collision(nearest.instance, true);

    movement:pathfind(tried);
end;

--// function to interpolate characters position to a position

function movement:move_to_position(Part, cframe, speed, car, target_vehicle, tried_vehicles, FollowSpeed)
    local vector_position = cframe.Position;
    
    if not car and Raycast(Part.Position, Vector3.new(0, 1000, 0)) then -- if there is an object above us, use pathfind function to get to a position with no collision above
        movement:pathfind();
        task.wait(0.5);
    end;
    local Speed = speed
    local y_level = 500;
    local higher_position = Vector3.new(vector_position.X, y_level, vector_position.Z); -- 500 studs above target position
 local start = Part.CFrame
 local distance = (cframe.p - start.p).magnitude
task.spawn(function()
if TeleportUp ~= nil then
 repeat
     Speed = car == true and dependencies.variables.vehicle_speed or dependencies.variables.player_speed
Part.CFrame = CFrame.new(Part.CFrame.X, y_level, Part.CFrame.Z)
Part.Velocity = Vector3.new()

task.wait()
    until (Part.Position - higher_position).Magnitude < 15
	    Part:PivotTo(CFrame.new(Part.Position.X, vector_position.Y, Part.Position.Z))
    Part.Velocity = Vector3.zero
end
end)
 for i = 0, 1, (Speed / distance) * 1 / 45 do
     if not Part:FindFirstChild('Seat') or (Part:FindFirstChild("Seat") and Part.Seat.PlayerName.Value == user.Name) then
   local new_position = start:lerp(cframe, i)
   Part:PivotTo(new_position)
   Part.CFrame = CFrame.new(Part.CFrame.X, y_level, Part.CFrame.Z)
Part.Velocity = Vector3.new()
   task.wait(1 / 45)
   end
 end
 Part:PivotTo(CFrame.new(Part.Position.X, vector_position.Y, Part.Position.Z))
end;
--// get free vehicles, owned helicopters, motorcycles and unsupported/new vehicles

for index, vehicle_data in next, dependencies.modules.vehicle_data do
    if vehicle_data.Type == "Heli" then -- helicopters
        dependencies.helicopters[vehicle_data.Make] = true;
    elseif vehicle_data.Type == "Motorcycle" then --- motorcycles
        dependencies.motorcycles[vehicle_data.Make] = true;
    end;

    if vehicle_data.Type ~= "Chassis" and vehicle_data.Type ~= "Motorcycle" and vehicle_data.Type ~= "Heli" and vehicle_data.Type ~= "DuneBuggy" and vehicle_data.Make ~= "Volt" then -- weird vehicles that are not supported
        dependencies.unsupported_vehicles[vehicle_data.Make] = true;
    end;
    
    if not vehicle_data.Price then -- free vehicles
        dependencies.free_vehicles[vehicle_data.Make] = true;
    end;
end;

--// get all positions near a door which have no collision above them

for index, value in next, workspace:GetDescendants() do
    if value.Name:sub(-4, -1) == "Door" and not value:IsDescendantOf(workspace:WaitForChild('MansionRobbery', math.huge)) then 
        local touch_Part = value:FindFirstChild("Touch");

        if touch_Part and touch_Part:IsA("BasePart") then
            for distance = 5, 100, 5 do 
                local forward_position, backward_position = touch_Part.Position + touch_Part.CFrame.LookVector * (distance + 3), touch_Part.Position + touch_Part.CFrame.LookVector * -(distance + 3); -- distance + 3 studs forward and backward from the door
                
                if not Raycast(forward_position, Vector3.new(0, 1000, 0)) then -- if there is nothing above the forward position from the door
                    table.insert(dependencies.door_positions, { instance = value, position = forward_position });

                    break;
                elseif not Raycast(backward_position, Vector3.new(0, 1000, 0)) then -- if there is nothing above the backward position from the door
                    table.insert(dependencies.door_positions, { instance = value, position = backward_position });

                    break;
                end;
            end;
        end;
    end;
end;

--// no fall damage or ragdoll or parachute

local old_is_point_in_tag = dependencies.modules.player_utils.isPointInTag;
dependencies.modules.player_utils.isPointInTag = function(point, tag)
    if dependencies.variables.teleporting and tag == "NoRagdoll" or tag == "NoFallDamage" or tag == "NoParachute" then
        return true;
    end;
    
    return old_is_point_in_tag(point, tag);
end;

--// stop velocity

task.spawn(function()
    while task.wait() do
        if dependencies.variables.stopVelocity and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            player.Character.HumanoidRootPart.Velocity = Vector3.zero;
        end;
    end;
end);

--// main teleport function (not returning a new function directly because of recursion)

function dependencies:teleport(cframe, tried) -- unoptimized
for _, v in pairs(game:GetService("Workspace").Vehicles:GetChildren()) do
if v:FindFirstChild('_VehicleState_'..game:GetService('Players').LocalPlayer.Name) then
movement:move_to_position(v.PrimaryPart, cframe, dependencies.variables.vehicle_speed);
repeat
                task.wait(0.15)
                require(game:GetService("ReplicatedStorage").Game.CharacterUtil).OnJump()
            until not v:FindFirstChild('Seat') or not v.Seat:FindFirstChild("Part") or v.Seat.PlayerName.Value ~= user.Name
return
end
end
    local relative_position = (cframe.Position - player.Character.HumanoidRootPart.Position);
    local target_distance = relative_position.Magnitude;

    if target_distance <= 20 and not Raycast(player.Character.HumanoidRootPart.Position, relative_position.Unit * target_distance, dependencies.variables.raycast_params) then 
        player.Character.HumanoidRootPart.CFrame = cframe; 
        
        return;
    end; 

    local tried = tried or { };
    local nearest_vehicle = utilities:get_nearest_vehicle(tried);
    local vehicle_object = nearest_vehicle and nearest_vehicle.ValidRoot;

    dependencies.variables.teleporting = true;

    if vehicle_object then 
        local vehicle_distance = (vehicle_object.Seat.Position - player.Character.HumanoidRootPart.Position).Magnitude;

        if target_distance < vehicle_distance then -- if target position is closer than the nearest vehicle
            movement:move_to_position(player.Character.HumanoidRootPart, cframe, dependencies.variables.player_speed);
        else 
            if vehicle_object.Seat.PlayerName.Value ~= player.Name then
                movement:move_to_position(player.Character.HumanoidRootPart, vehicle_object.Seat.CFrame, dependencies.variables.player_speed, false, vehicle_object, tried);

                dependencies.variables.stopVelocity = true;

                local enter_attempts = 1;

                repeat -- attempt to enter car
                    nearest_vehicle:Callback(true)
                    
                    enter_attempts = enter_attempts + 1;

                    task.wait(0.1);
                until enter_attempts == 10 or vehicle_object.Seat.PlayerName.Value == player.Name;

                dependencies.variables.stopVelocity = false;

                if vehicle_object.Seat.PlayerName.Value ~= player.Name then -- if it failed to enter, try a new car
                    table.insert(tried, vehicle_object);

                    return dependencies:teleport(cframe, tried ~= nil and tried or { vehicle_object });
                end;
            end;

            movement:move_to_position(vehicle_object.PrimaryPart, cframe, dependencies.variables.vehicle_speed, true);

            repeat -- attempt to exit car
                task.wait(0.15);
                dependencies.modules.character_util.OnJump();
            until vehicle_object.Seat.PlayerName.Value ~= player.Name;
        end;
    else
        movement:move_to_position(player.Character.HumanoidRootPart, cframe, dependencies.variables.player_speed);
    end;

    task.wait(0.5);
    dependencies.variables.teleporting = false;
end;
return dependencies
